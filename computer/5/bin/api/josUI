function newForm(sName,xPos,yPos,vWidth,vHeight,barColor,bckColor)
	if barColor == nil then
		barColor = colors.blue
	end
	if bckColor == nil then
		bckColor = colors.grey
	end

	return{
		name = sName,
		x = xPos,
		y = yPos,
		width = vWidth,
		height = vHeight,
		backColor = bckColor,
		menuBarColor = barColor,
		enabled = true,
		UIs = {},
		addUI = function(self,ui)
			self.UIs[#self.UIs+1] = ui
		end,
		render = function(self)
			term.setBackgroundColor(self.backColor)
			term.setTextColor(colors.black)
			term.clear()
			for i=1,#self.UIs do
				self.UIs[i]:render()
			end
			term.setBackgroundColor(self.menuBarColor)
			for i = self.x,self.width do
				term.setCursorPos(i,1)
				write(" ")
			end
			term.setTextColor(colors.black)
			term.setCursorPos(1,1)
			write(self.name)
		end,
		update = function(self ,event)
			for i=1,#self.UIs do
				self.UIs[i]:update(event)
			end
		end
	}

end

function newPanel(sName)

	return{
		name = sName,
		UIs = {},
		enabled = true,
		addUI = function(self,ui)
			self.UIs[#self.UIs+1] = ui
		end,
		render = function(self)
			for i=1,#self.UIs do
				if self.UIs[i].enabled then
					self.UIs[i]:render()
				end
			end
		end,
		
		update = function(self ,event)
			for i=1,#self.UIs do
				if self.UIs[i].enabled then
					self.UIs[i]:update(event)
				end
			end
		end
	}

end

function newButton(sName,sAction,xPos,yPos,vWidth,vHeight,theColor)
	
	if vWidth ==nil then
		vWidth = 10
	end
	if vheight ==nil then
		vheight = 3
	end
	
	return {
		name = sName,
		action = sAction,
		x = xPos,
		y = yPos,
		drawHeight = math.ceil(vHeight/2),
		width = vWidth,
		height = vHeight,
		color = theColor,
		enabled = true,
		alignRight = false,
		render = function(self)
			local x
			local y = self.y
			if self.alignRight then
				local termSizex = nil
				local termSizey = nil
				termSizex, termSizey = term.getSize()
				x = termSizex - self.x+1
			else
				x = self.x
			end
			term.setBackgroundColor(self.color)
			term.setTextColor(colors.black)
			for x1 = 0,vWidth-1 do
				for y1 = 0,vHeight-1 do
					term.setCursorPos(x+x1,y+y1)
					write(" ")
				end
			end
			term.setCursorPos(x,y+self.drawHeight-1)
			local tex = string.sub(self.name,1,self.width)
			write(tex)
		end,
		update = function(self,event) 
			local x
			local y = self.y
			if self.alignRight then
				local termSizex = nil
				local termSizey = nil
				termSizex, termSizey = term.getSize()
				x = termSizex - self.x+1
			else
				x = self.x
			end
			if event[1] == "mouse_click" and event[2] == 1 then
				local x1 = event[3]
				local y1 = event[4]
				if x1 >= x and x1< x + self.width and y1 >= y and y1< y + self.height then
					self.action(self)
				end
			end
		end
	}
	
end

function newImage(sName,file,xPos,yPos)
	
	local theImage = paintutils.loadImage(file)
	return {
		name = sName,
		x = xPos,
		y = yPos,
		image = theImage,
		enabled = true,
		render = function(self)
			paintutils.drawImage(self.image,self.x,self.y)
		end,
		update = function(self,event) 
			if event[1] == "mouse_click" and event[2] == 1 then
				local x = event[3]
				local y = event[4]
				if x >= self.x and x< self.x + #self.name and y >= self.y and y< self.y + 1 then
					--self.action(self)
				end
			end
		end
	}

end

function newLabel(sName,xPos,yPos,theColor)
	local txtColor = colors.black
	if theColor == colors.black then
		txtColor = colors.white
	end
	

	return {
		name = sName,
		action = sAction,
		x = xPos,
		y = yPos,
		color = theColor,
		textColor = txtColor,
		enabled = true,
		render = function(self)
			
			term.setBackgroundColor(self.color)
			term.setTextColor(self.textColor)
			term.setCursorPos(self.x,self.y)
			write(self.name)
		end,
		update = function(self,event) 
			if event[1] == "mouse_click" and event[2] == 1 then
				local x = event[3]
				local y = event[4]
				if x >= self.x and x< self.x + #self.name and y >= self.y and y< self.y + 1 then
					--self.action(self)
				end
			end
		end
	}
	
end

function newInput(sName,xPos,yPos,vWidth,vHeight,theColor)
	
	return{
		name = sName,
		value = "",
		x = xPos,
		y = yPos,
		drawHeight = math.ceil(vHeight/2),
		width = vWidth,
		height = vHeight,
		color = theColor,
		clicked = false,
		enabled = true,
		render = function(self)
			value = self.value
			term.setBackgroundColor(self.color)
			for x = 0,vWidth-1 do
				for y = 0,vHeight-1 do
					term.setCursorPos(self.x+x,self.y+y)
					write(" ")
				end
			end
			term.setCursorPos(self.x,self.y+self.drawHeight-1)
			if(#value > self.width-1)then
				write(value:sub(#value-self.width+2,#value))
			else
				write(value)
			end
			if self.clicked then
				if(#value >= self.width)then
					term.setCursorPos(self.x + self.width-1,self.y+self.drawHeight-1)
				else
					term.setCursorPos(self.x + #value,self.y+self.drawHeight-1)
				end
				write(">")
			end
		end,
		update = function(self,event)
			if event[1] == "mouse_click" and event[2] == 1 then
				local x = event[3]
				local y = event[4]
				if x >= self.x and x< self.x + self.width and y >= self.y and y< self.y + self.height then
					self.clicked = true
				else
					self.clicked = false
				end
			end
				if self.clicked then
				if event[1] == "char" then
					self.value = self.value..event[2]
				elseif event[1] == "key" and event[2] == 14 then
					self.value = self.value:sub(1,string.len(self.value)-1)
				elseif (event[1] == "key" and event[2] == 28) then
					self.clicked = false
				end	
			end
		end
	}
	
end

function newMenubar(sName,theColor)

	return{
		name = sName,
		items = {},
		color = theColor,
		xPos = 1,
		enabled = true,
		addItem = function(self,itm)
			self.items[#self.items+1] = itm
		end,
		
		render = function(self)
			local items = self.items
			term.setBackgroundColor(self.color)
			for i = 1,51 do
				term.setCursorPos(i,2)
				write(" ")
			end
			
			if items ~= nil then
				for i = 1,#items do
					items[i].x = self.xPos
					items[i].y = 2
					items[i].width = #items[i].name
					items[i].height = 1
					self.xPos = self.xPos+#items[i].name+1
					
					
					items[i]:render()
				end
				self.xPos = 1
			end
		end,
		update = function(self,event)
			local items = self.items
			if items ~= nil then
				for i = 1,#items do
					items[i]:update(event)
				end
			end
		
		end
		
		
	}
	
end

function newFolderItem(sName,sValue,sAction1,sAction2,xPos,yPos)
	
	local sArray = nil
	if fs.isDir(sValue) then
		sArray = jos.loadLabelIcon(josCfg.folderIcon)
	else
		if josCfg.fileExtensionIcon[fc.getFileExtension(sValue)] ~= nil then
			sArray = jos.loadLabelIcon(josCfg.fileExtensionIcon[fc.getFileExtension(sValue)])
		else
			sArray = jos.loadLabelIcon(josCfg.blankIcon)
		end
	end
	
	return {
		name = sName,
		value = sValue,
		x = xPos,
		y = yPos,
		arr = sArray,
		action1 = sAction1,
		action2 = sAction2,
		enabled = true,
		render = function(self)
			jos.drawLabelCustom(self.name,self.x+1,self.y,colors.black,colors.gray,colors.lightGray,self.arr)
		end,
		update = function(self,event)
			if event[1] == "mouse_click" and event[2] == 1 then
				local x = event[3]
				local y = event[4]
				if x >= self.x+1 and x< self.x+1 + 4 and y >= self.y and y< self.y + 4 then
					self.action1(self)
				end
			elseif event[1] == "mouse_click" and event[2] == 2 then
				local x = event[3]
				local y = event[4]
				if x >= self.x+1 and x< self.x+1 + 4 and y >= self.y and y< self.y + 4 then
					self.action2(self)
				end
			end
		end
	}
	
end

function newFileList(sName,sDir,xPos,yPos,vWidth,vHeight,sAction1,sAction2)
	
	
	local function test(dir)
		local items = {}
		local files = fs.list(dir)
		local folderWidth = 1 + 4 + 1 + 1
		local folderheight = 3 + 1 + 1
		for i = 1,#files do
			local file = files[i]
		--for i,file in ipairs(test) do
			local xVal = (i * folderWidth)
			local yIndex = math.ceil((xVal)/(vWidth))
			if yIndex == 0 then yIndex = 1 end
			local yVal = yIndex*folderheight - folderheight+yPos
			if yVal + folderheight >= yPos+vHeight then
				break
			end
			items[#items+1] = newFolderItem(file,dir..file,sAction1,sAction2,xVal-((yIndex-1)*vWidth)-folderWidth+xPos,yVal)
		end
		return items
	end
	
	return {
		name = sName,
		dir = sDir,
		currentDir = "",
		x = xPos,
		y = yPos,
		width = vWidth,
		height = vHeight,
		items = test(sDir),
		begin = nil,
		finish = nil,
		action1 = sAction1,
		action2 = sAction2,
		enabled = true,
		listChoose = function(self,begin,finish)
			self.begin = begin
			self.finish = finish
			self.currentDir = "--"
		end,
		render = function(self)
			for i=1,#self.items do
				self.items[i]:render()
			end
		end,
		update = function(self,event)
			local dir = self.dir
			local folderWidth = 1 + 4 + 1 + 1
			local folderheight = 3 + 1 + 1
			if dir:sub(#dir,#dir) ~= "/" then
				dir = dir .. "/"
			end
			if self.currentDir ~= dir then
				self.currentDir = dir
				self.items = {}
				local test = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o"}
				local test2 = {"a","b","c","d"}
				local files = fs.list(dir)
				if self.begin == nil then
					self.begin = 1
				end
				if self.finish == nil then
					self.finish = #files
				end
				for i = 1,self.finish - self.begin+1 do
					local file = files[i+self.begin-1]
				--for i,file in ipairs(test) do
					local xVal = (i * folderWidth)
					local yIndex = math.ceil((xVal)/(self.width))
					if yIndex == 0 then yIndex = 1 end
					local yVal = yIndex*folderheight - folderheight+self.y
					if yVal + folderheight >= self.y+self.height then
						break
					end
					self.items[#self.items+1] = newFolderItem(file,dir..file,self.action1,self.action2,xVal-((yIndex-1)*self.width)-folderWidth+self.x,yVal)
				end
			end
			--print(#self.items)sleep(2)
			for i=1,#self.items do
				self.items[i]:update(event)
			end
			
		end
	}
end

function newRect(sName,xPos,yPos,vWidth,vHeight,sColor)
	
	return{
		name = sName,
		x = xPos,
		y = yPos,
		width = vWidth,
		height = vHeight,
		color = sColor,
		enabled = true,
		render = function(self)
			jos.drawRectangle(self.x,self.y,self.width,self.height,self.color)
		end,
		update = function(self,event)
			
		end
	
	}
	
end

function newPopupList(sName,xPos,yPos,sList,sAction)
	
	local sBtns = {}
	local longestItem = 0
	for i =1,#sList do
		if #sList[i] > longestItem then
			longestItem = #sList[i]
		end
	end
	for i =1,#sList do
		sBtns[#sBtns+1] = newButton(sList[i],sAction,xPos,yPos-(#sList-i),longestItem+2,1,colors.white)
	end
	
	return{
		name = sName,
		x = xPos,
		y = yPos,
		btns = sBtns,
		width = longestItem+2,
		enabled = true,
		render = function (self)
			for i=1,#self.btns do
				self.btns[i]:render()
			end
		end,
		update = function(self,event)
			if event[1] == "mouse_click" and event[2] == 1 then
				local x = event[3]
				local y = event[4]
				if x >= self.x and x< self.x + self.width and y > self.y-#self.btns and y< self.y+2 then
					
				else
					self.enabled = false
				end
			end
			for i=1,#self.btns do
				self.btns[i]:update(event)
			end
		end
	
	}
end

function newTabList(sName,xPos,yPos,vWidth,vHeight,vTabs)
	
	return{
	
		name = sName,
		x = xPos,
		y = yPos,
		width = vWidth,
		height = vHeight,
		tabBtns = {},
		enabled = true,
		tabs = vTabs,
		render = function(self)
			
			for i=1,#self.tabBtns do
				if self.tabBtns[i].enabled then
					self.tabBtns[i]:render()
				end
			end
		end,
		update = function(self,event)
			self.tabBtns = {}
			local tabs = self.tabs
			local btnWidth = 4 + 1
			local xPs = 1
			for i = 1,#tabs do
				--print(tabs[i].name)sleep(2)
				self.tabBtns[#self.tabBtns+1] = newButton(tabs[i].name,function(self) josMulti.changeCurrentTabI(self.id) end,self.x+xPs,self.y,btnWidth,self.height,colors.lightBlue)
				self.tabBtns[#self.tabBtns].id = i
				xPs = xPs+btnWidth+1
			end
			for i = 1,#self.tabBtns do
				if self.tabBtns[i].enabled then
					self.tabBtns[i]:update(event)
				end
			end
		end
		
	}
	
end