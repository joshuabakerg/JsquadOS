tabs = {}
local desktopTab = nil
local useDesktop = true
local lastTab = nil
local currentTab = 1
local mainTerm = term.current()
local tEvn = {
    ["shell"] = shell,
    ["multishell"] = multishell,
}
defaultTermSize = {1,1,51,19}

local mainPanel = nil
local currentTabBtn = nil
local tabReduceBtn = nil
local tabIncreadeBtn = nil
local minimizeBtn = nil
local maximizeBtn = nil
local exitBtn = nil

function newTab(sProg,sName,sargs,isDesktop) 
	if isDesktop == true then
		desktopTab = {
			name = sName,
			terminal = window.create(mainTerm,table.unpack(defaultTermSize)),
			minSize = {w=10,h=10},
			process = coroutine.create(
				function()
					os.run(tEvn,"/bin/josShell",sProg,table.unpack({sargs}))
				end
			),
			changeSize = function(self,x,y)
				self.minSize.w = x
				self.minSize.h = y
			end
		}
	else	
		tabs[#tabs +1] = {
			name = sName,
			terminal = window.create(mainTerm,table.unpack(defaultTermSize)),
			minSize = {w=10,h=10},
			process = coroutine.create(
				function()
					os.run(tEvn,"/bin/josShell",sProg,table.unpack({sargs}))
				end
			),
			changeSize = function(self,x,y)
				self.minSize.w = x
				self.minSize.h = y
			end
		}
	end
	return #tabs
end

function start()
	local evnt = {}
	local tmp = ""
	init()
	while true do 
		local tab = nil
		local tempCurrentTab = currentTab
		if useDesktop then
			if desktopTab ~= nil then
				tab = desktopTab
			else
				tab = tabs[currentTab]
			end
		else
			if tabs[currentTab] == nil then
				tab = desktopTab
			else
				tab = tabs[currentTab]
			end
		end
		if desktopTab == nil and #tabs < 1 then
			break
		end
		term.redirect(tab.terminal)
		tmp = {coroutine.resume(tab.process,unpack(evnt))}
		if coroutine.status(tab.process) == "dead" then
			table.remove(tabs,currentTab)
			--break
		end
		local x , y = term.getCursorPos()
		local orgBckColor = term.getBackgroundColor()
		local orgTxtColor = term.getTextColor()
		tab.terminal.redraw()
		if tab ~= desktopTab then
			currentTabBtn.name = currentTab
			mainPanel:render()
		end
		term.setCursorPos(x,y)
		term.setBackgroundColor(orgBckColor)
		term.setTextColor(orgTxtColor)
		if tempCurrentTab == currentTab then
			evnt = {os.pullEvent(tmp[2])}
			if tab ~= desktopTab then
				mainPanel:update(evnt)
			end
		end
	end
	
end

function init()
	currentTabBtn = josUI.newButton("0",function() end,6,1,1,1,colors.blue)
	currentTabBtn.alignRight = true
	tabReduceBtn = josUI.newButton("<",function() changeCurrentTabI(currentTab-1) end,5,1,1,1,colors.blue)
	tabReduceBtn.alignRight = true
	tabIncreadeBtn = josUI.newButton(">",function() changeCurrentTabI(currentTab+1) end,4,1,1,1,colors.blue)
	tabIncreadeBtn.alignRight = true
	minimizeBtn = josUI.newButton("-",function() useDesktop = true end,3,1,1,1,colors.orange)
	minimizeBtn.alignRight = true
	maximizeBtn = josUI.newButton("+",function() end,2,1,1,1,colors.green)
	maximizeBtn.alignRight = true
	exitBtn = josUI.newButton("x",function() table.remove(tabs,currentTab) if lastTab ~= nil then currentTab = lastTab else useDesktop = true end end,1,1,1,1,colors.red)
	exitBtn.alignRight = true
	mainPanel = josUI.newPanel("mainPnl")
	mainPanel:addUI(currentTabBtn)
	mainPanel:addUI(tabReduceBtn)
	mainPanel:addUI(tabIncreadeBtn)
	mainPanel:addUI(minimizeBtn)
	mainPanel:addUI(maximizeBtn)
	mainPanel:addUI(exitBtn)

end

function getTabs()
	return tabs
end

function setLastTab(id)
	lastTab = id
end

function getCurrentTab()
	return currentTab
end

function getTab(id)
	if id > 0 or id <= #tabs then
		return tabs[id]
	end
end

function getTabName(id)
	if id > 0 or id <= #tabs then
		return tabs[id].name
	end
end

function changeCurrentTabI(id)
	useDesktop = false
	if id > 0 and id <= #tabs then
		currentTab = id
	end
end

function changeCurrentTabN(name)
	useDesktop = false
	for i = 1,#tabs do
		if tabs[i].name == name then
			currentTab = i
		end
	end
	
end