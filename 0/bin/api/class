function runnable()
	local result = {}
	
	result.destroyed = false
	result.engine = nil
	
	
	function result.initialize(self,engine)
		self.engine = engine
	end
	
	function result.destroy(self,env)
		self.destroyed = true
	end
	
	function result.update(self)
	
	end
	
	function result.render(self,renderer)
	
	end
	return result
end

function _G.new(file,args)
	print(_G)
	result = {}

	local tEnv = {}
	setmetatable( tEnv, { __index = _G } )
	local tAPI,err = loadfile(file,tEnv)
	print("here")
	if tAPI then
		local ok,err = pcall(tAPI)
		if not ok then
			--logger
			printError(err)
			return {}
		end
	else
		--logger
		printError(err)
		return {}
	end
	for k,v in pairs(tEnv) do
		if k ~= "_ENV" then
			if k == fs.getName(file) then
				v(table.unpack(args))
			else
				result[k] = v
			end
		end
	end

	return result
end

function vector2(x,y)
	result = {}
	result.type = "vector2"
	result.x = x
	result.y = y
	function result.copy(self)
		return vector2(self.x,self.y)
	end

	return result
end

function rect(vect2,w,h)
	result = {}
	result.type = "rect"
	result.coord = vect2.type == "vector2" and vect2 or vector2(0,0)
	result.width = w
	result.height = h

	function result.contains(self,vect2)
		if vect2.type ~= "vector2" then return false end
		if vect2.x < self.coord.x then return false end
		if vect2.x > self.coord.x+self.width then return false end
		if vect2.y < self.coord.y then return false end
		if vect2.y > self.coord.y+self.height then return false end
		return true
	end

	return result
end