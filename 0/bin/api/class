function runnable()
	local result = {}
	
	result.destroyed = false
	result.engine = nil
	
	
	function result.initialize(self,engine)
		self.engine = engine
	end
	
	function result.destroy(self,env)
		self.destroyed = true
	end
	
	function result.update(self)
	
	end
	
	function result.render(self,renderer)
	
	end
	return result
end

_G.objs = {}
_G.static = {}
function _G.new(file,...)
	result = {}
	local tEnv = {}
	tEnv.this = tEnv
	setmetatable( tEnv, { __index = _G } )

	--look in class dir first for given file, if not found return nil
	if fs.exists("/bin/class/"..file) then file = "/bin/class/"..file end
	if not fs.exists(file) then
		return nil
	end

	--loading files to table for faster load times and less disk usage
	if _G.objs[file] == nil then
		local tfile = fs.open( file, "r" )
    	if tfile then
    		_G.objs[file] = tfile.readAll()
    		tfile.close()
    	end
	end

	--setting up static env for classes
	if _G.static[fs.getName(file)] == nil then
		_G.static[fs.getName(file)] = {} 
	end
	tEnv.static = _G.static[fs.getName(file)]
	 
	local tAPI,err = load(_G.objs[file],fs.getName(file), "t", tEnv)
	if tAPI then
		local ok,err = pcall(tAPI)
		if not ok then
			logger.log("error","failed when calling file "..fe.getName(file).."\n"..err)
			printError(err)
			return {}
		end
	else
		--logger
		printError(err)
		return {}
	end
	for k,v in pairs(tEnv) do
		if k ~= "_ENV" then
			if k == fs.getName(file) then
				if type(v.new) == "function" then v.new(table.unpack(arg)) end
				result = v
			end
		end
	end

	return result
end

function _G.del(obj)
	local key = next(obj) -- get the first key
	while key do
	    local k = key -- store the key
	    key = next(obj, key) -- get the next key first
	    obj[k] = nil -- and then delete the value
	end
end

function vector2(x,y)
	result = {}
	result.type = "vector2"
	result.x = x
	result.y = y
	function result.copy(self)
		return vector2(self.x,self.y)
	end

	return result
end

function rect(vect2,w,h)
	result = {}
	result.type = "rect"
	result.coord = vect2.type == "vector2" and vect2 or vector2(0,0)
	result.width = w
	result.height = h

	function result.contains(self,vect2)
		if vect2.type ~= "vector2" then return false end
		if vect2.x < self.coord.x then return false end
		if vect2.x > self.coord.x+self.width then return false end
		if vect2.y < self.coord.y then return false end
		if vect2.y > self.coord.y+self.height then return false end
		return true
	end

	return result
end