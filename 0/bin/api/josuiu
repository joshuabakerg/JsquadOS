function newForm(sName,xPos,yPos,vWidth,vHeight,barColor,bckColor)
	if barColor == nil then
		barColor = colors.blue
	end
	if bckColor == nil then
		bckColor = colors.grey
	end

	local result = class.runnable()

	result.name = sName
	result.x = xPos
	result.y = yPos
	result.width = vWidth
	result.height = vHeight
	result.backColor = bckColor
	result.menuBarColor = barColor
	result.enabled = true
	result.UIs = {}
	function result.addUI(self,ui)
		self.UIs[#self.UIs+1] = ui
	end
	function result.render(self,renderer)
		renderer:clear(self.backColor)
		for i=1,#self.UIs do
			if self.UIs[i].enabled then
				self.UIs[i]:render(renderer)
			end
		end
		for i = self.x,self.width do
			renderer:drawNew(i,1,self.menuBarColor,colors.black)
		end
		renderer:drawNew(1,1,self.menuBarColor,colors.black,self.name)
	end
	function result.update(self ,event)
		for i=#self.UIs,1,-1 do
			if self.UIs[i].enabled then
				self.UIs[i]:update(event)
			end
		end
	end
	return result
end

function newPanel(sName)

	return{
		name = sName,
		UIs = {},
		enabled = true,
		addUI = function(self,ui)
			self.UIs[#self.UIs+1] = ui
		end,
		render = function(self,renderer)
			for i=1,#self.UIs do
				if self.UIs[i].enabled then
					self.UIs[i]:render(renderer)
				end
			end
		end,
		
		update = function(self ,event)
			for i=#self.UIs,1,-1 do
				if self.UIs[i].enabled then
					self.UIs[i]:update(event)
				end
			end
		end
	}
end

function newButton(sName,sAction,xPos,yPos,vWidth,vHeight,theColor)
	local result = class.runnable()

	result.enabled = true
	result.name = sName
	result.action = sAction
	result.x = xPos
	result.y = yPos
	result.width = vWidth
	result.height = vHeight
	result.color = theColor
	result.drawHeight = math.ceil(vHeight/2)

	function result.render(self,renderer)
		local x
		local y = self.y
		if self.alignRight then
			local termSizex = nil
			local termSizey = nil
			termSizex, termSizey = term.getSize()
			x = termSizex - self.x+1
		else
			x = self.x
		end
		for x1 = 0,self.width-1 do
			for y1 = 0,self.height-1 do
				renderer:drawNew(x+x1,y+y1,self.color,colors.black)
			end
		end
		local tex = string.sub(self.name,1,self.width)
		renderer:drawNew(x,y+self.drawHeight-1,self.color,colors.black,tex)
	end

	function result.update(self,event)
		local x
		local y = self.y
		if self.alignRight then
			local termSizex = nil
			local termSizey = nil
			termSizex, termSizey = term.getSize()
			x = termSizex - self.x+1
		else
			x = self.x
		end
		if event[1] == "mouse_click" and event[2] == 1 then
			local x1 = event[3]
			local y1 = event[4]
			if x1 >= x and x1< x + self.width and y1 >= y and y1< y + self.height then
				self.action(self)
			end
		end
	end

	return result
end

function newImage(sName,file,xPos,yPos)
	
	local theImage = paintutils.loadImage(file)
	return {
		name = sName,
		x = xPos,
		y = yPos,
		image = theImage,
		imageDir = file,
		enabled = true,
		render = function(self,renderer)
			renderer:drawImage(self.image,self.x,self.y)
		end,
		update = function(self,event) 
			if event[1] == "mouse_click" and event[2] == 1 then
				local x = event[3]
				local y = event[4]
				if x >= self.x and x< self.x + #self.name and y >= self.y and y< self.y + 1 then
					--self.action(self)
				end
			end
		end
	}
end

function newLabel(sName,xPos,yPos,theColor)
	local txtColor = colors.black
	if theColor == colors.black then
		txtColor = colors.white
	end
	

	return {
		name = sName,
		action = sAction,
		x = xPos,
		y = yPos,
		color = theColor,
		textColor = txtColor,
		enabled = true,
		render = function(self,renderer)
			term.setTextColor(self.textColor)
			renderer:drawNew(self.x,self.y,self.color,self.textColor,self.name)
		end,
		update = function(self,event) 
			if event[1] == "mouse_click" and event[2] == 1 then
				local x = event[3]
				local y = event[4]
				if x >= self.x and x< self.x + #self.name and y >= self.y and y< self.y + 1 then
					--self.action(self)
				end
			end
		end
	}	
end

function newInput(sName,xPos,yPos,vWidth,vHeight,theColor)
	
	return{
		name = sName,
		value = "",
		x = xPos,
		y = yPos,
		drawHeight = math.ceil(vHeight/2),
		width = vWidth,
		height = vHeight,
		color = theColor,
		clicked = false,
		executeButton = nil,
		enabled = true,
		render = function(self,renderer)
			value = self.value
			for x = 0,vWidth-1 do
				for y = 0,vHeight-1 do
					renderer:drawNew(self.x+x,self.y+y,self.color)
				end
			end
			if(#value > self.width-1)then
				renderer:drawNew(self.x,self.y+self.drawHeight-1,self.color,nil,value:sub(#value-self.width+2,#value))
			else
				renderer:drawNew(self.x,self.y+self.drawHeight-1,self.color,nil,value)
			end
			if self.clicked then
				if(#value >= self.width)then
					renderer:drawNew(self.x + self.width-1,self.y+self.drawHeight-1,self.color,nil,">")
				else
					renderer:drawNew(self.x + #value,self.y+self.drawHeight-1,self.color,nil,">")
				end
			end
		end,
		update = function(self,event)
			if event[1] == "mouse_click" and event[2] == 1 then
				local x = event[3]
				local y = event[4]
				if x >= self.x and x< self.x + self.width and y >= self.y and y< self.y + self.height then
					self.clicked = true
				else
					self.clicked = false
				end
			end
			while self.clicked do
				event = {os.pullEvent()}
				if event[1] == "char" then
					self.value = self.value..event[2]
				elseif event[1] == "key" and event[2] == 14 then
					self.value = self.value:sub(1,string.len(self.value)-1)
				elseif (event[1] == "key" and event[2] == 28) then
					self.clicked = false
				elseif event[1] == "key" and event[2] == 28 then
		 			if self.executeButton ~= nil then
						self.executeButton.action(self.executeButton)
			 		end
			 	else
			 		self.clicked = false
			 	end		
			end
			-- if self.clicked then
			-- 	if event[1] == "char" then
			-- 		self.value = self.value..event[2]
			-- 	elseif event[1] == "key" and event[2] == 14 then
			-- 		self.value = self.value:sub(1,string.len(self.value)-1)
			-- 	elseif (event[1] == "key" and event[2] == 28) then
			-- 		self.clicked = false
			-- 	end	
			-- end
			-- if event[1] == "key" and event[2] == 28 then
			-- 	if self.executeButton ~= nil then
			-- 		self.executeButton.action(self.executeButton)
			-- 	end
			-- end
		end
	}
end

function newMenubar(sName,theColor)

	return{
		name = sName,
		items = {},
		color = theColor,
		xPos = 1,
		enabled = true,
		addItem = function(self,itm)
			self.items[#self.items+1] = itm
		end,
		
		render = function(self,renderer)
			local items = self.items
			for i = 1,51 do
				renderer:drawNew(i,2,self.color)
			end
			
			if items ~= nil then
				for i = 1,#items do
					items[i].x = self.xPos
					items[i].y = 2
					items[i].width = #items[i].name
					items[i].height = 1
					self.xPos = self.xPos+#items[i].name+1
					
					
					items[i]:render(renderer)
				end
				self.xPos = 1
			end
		end,
		update = function(self,event)
			local items = self.items
			if items ~= nil then
				for i = 1,#items do
					items[i]:update(event)
				end
			end
		
		end
		
		
	}
end

function newFolderItem(sName,sValue,sAction1,sAction2,xPos,yPos)
	
	local sArray = nil
	if fs.isDir(sValue) then
		sArray = jos.loadLabelIcon(josCfg.folderIcon)
	else
		if josCfg.fileExtensionIcon[fc.getFileExtension(sValue)] ~= nil then
			sArray = jos.loadLabelIcon(josCfg.fileExtensionIcon[fc.getFileExtension(sValue)])
		else
			sArray = jos.loadLabelIcon(josCfg.blankIcon)
		end
	end
	
	return {
		name = sName,
		value = sValue,
		x = xPos,
		y = yPos,
		mouseX = 1,
		mouseY = 1,
		bounds = class.rect(class.vector2(xPos,yPos),3,3),
		arr = sArray,
		action1 = sAction1,
		action2 = sAction2,
		clicked = false,
		enabled = true,
		render = function(self,renderer)
			for ya = 0,2 do
				for xa = 0,3 do
					if self.arr[xa+(ya+3)*4+1] == nil then
						renderer:drawNew(self.x+xa,self.y+ya,jos.charToColour(self.arr[xa+ya*4+1]))
					else
						renderer:drawNew(self.x+xa,self.y+ya,jos.charToColour(self.arr[xa+ya*4+1]),nil,self.arr[xa+(ya+3)*4+1])
					end
				end
			end
			renderer:drawNew(self.x-1,self.y+3,colors.gray,nil,self.name:sub(1,6))
			--renderer:write(self.name:sub(1,6),self.x-1,self.y+3,colors.black)
			term.setCursorPos(self.x,self.y+4)
			--renderer:drawNew(self.x,self.y+4,colors.gray,nil,self.name:sub(7,10))
			renderer:write(self.name:sub(7,10),self.x,self.y+4,colors.black)
		end,
		update = function(self,event)
			self.clicked = false
			if event[1] == "mouse_click" and event[2] == 1 then
				local x = event[3]
				local y = event[4]
				if x >= self.x and x< self.x + 4 and y >= self.y and y< self.y + 4 then
					self.mouseX = x
					self.mouseY = y
					self.clicked = true
					self.action1(self)
				end
			elseif event[1] == "mouse_click" and event[2] == 2 then
				local x = event[3]
				local y = event[4]
				if self.bounds:contains(class.vector2(x,y)) then
					self.mouseX = x
					self.mouseY = y
					self.clicked = true
					self.action2(self)
				end
				--if x >= self.x+1 and x< self.x+1 + 4 and y >= self.y and y< self.y + 4 then
					
				--end
			end
		end
	}
end

function newFileList(sName,sDir,xPos,yPos,vWidth,vHeight,sAction1,sAction2)
	
	local function test(dir)
		local items = {}
		local files = fs.list(dir)
		local folderWidth = 1 + 4 + 1 + 1
		local folderheight = 3 + 1 + 1
		for i = 1,#files do
			local file = files[i]
		--for i,file in ipairs(test) do
			local xVal = (i * folderWidth)
			local yIndex = math.ceil((xVal)/(vWidth))
			if yIndex == 0 then yIndex = 1 end
			local yVal = yIndex*folderheight - folderheight+yPos
			if yVal + folderheight >= yPos+vHeight then
				break
			end
			items[#items+1] = newFolderItem(file,dir..file,sAction1,sAction2,xVal-((yIndex-1)*vWidth)-folderWidth+xPos,yVal)
		end
		return items
	end
	
	return {
		name = sName,
		dir = sDir,
		currentDir = "",
		x = xPos,
		y = yPos,
		width = vWidth,
		height = vHeight,
		items = test(sDir),
		noItems = 1,
		begin = nil,
		finish = nil,
		alwaysUpdate = true,
		action1 = sAction1,
		action2 = sAction2,
		enabled = true,
		listChoose = function(self,begin,finish)
			self.begin = begin
			self.finish = finish
			self.currentDir = "--"
		end,
		render = function(self,renderer)
			for i=1,#self.items do
				self.items[i]:render(renderer)
			end
		end,
		update = function(self,event)
			local dir = self.dir
			local folderWidth = 1 + 4 + 1 + 1
			local folderheight = 3 + 1 + 1
			if dir:sub(#dir,#dir) ~= "/" then
				dir = dir .. "/"
			end
			
			local function updateFiles()
				self.currentDir = dir
				self.items = {}
				local test = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o"}
				local test2 = {"a","b","c","d"}
				local files = fs.list(dir)
				self.noItems = #files
				
				local ctrlBegin = self.begin
				local ctrlFinish = self.finish
				
				if ctrlBegin == nil then
					ctrlBegin = 1
				end
				if ctrlFinish == nil then
					ctrlFinish = #files
				end
				
				for i = 1,ctrlFinish - ctrlBegin+1 do
					local file = files[i+ctrlBegin-1]
				--for i,file in ipairs(test) do
					local xVal = (i * folderWidth)
					local yIndex = math.ceil((xVal)/(self.width))
					if yIndex == 0 then yIndex = 1 end
					local yVal = yIndex*folderheight - folderheight+self.y
					if yVal + folderheight >= self.y+self.height then
						break
					end
					--write(dir)
					self.items[#self.items+1] = newFolderItem(file,dir..file,self.action1,self.action2,xVal-((yIndex-1)*self.width)-folderWidth+self.x,yVal)
				end
			end
			
			if self.alwaysUpdate then
				updateFiles()
			else
				if self.currentDir ~= dir then
					updateFiles()
				end
			end
			
			--print(#self.items)sleep(2)
			local shouldClear = false
			for i=1,#self.items do
				self.items[i]:update(event)
				if self.items[i].clicked then
					shouldClear = true
				end
			end
			if shouldClear then
				event[1] = "cleared"
			end
			
		end
	}
end

function newScrollBar(sName,xPos,yPos,tFileList)

	return {
	
		name = sName,
		x = xPos,
		y = yPos,
		width = 1,
		height = 3,
		fileList = tFileList,
		color = theColor,
		enabled = true,
		alignRight = false,
		scrollAmnt = 1,
		dir = "/",
		render = function(self,renderer)

			renderer:drawNew(self.x,self.y,colors.lightGray,colors.gray,"^")
			renderer:drawNew(self.x,self.y+2,colors.lightGray,colors.gray,"v")
		end,
		update = function(self,event)
			self.scrollAmnt = math.ceil(self.fileList.width / 7 )
			if(self.fileList.dir ~= self.dir) then
				self.dir = self.fileList.dir
				self.fileList.begin = nil
			end
			local x = self.x
			local y = self.y

			local function scrollUp()
				local begin = self.fileList.begin
				if begin == nil then
					begin = 1
				end
				begin = begin - self.scrollAmnt
				if begin < 1 then
					begin = 1
				end
				self.fileList.begin = begin
			end

			local function scrollDown()
				local begin = self.fileList.begin
				if begin == nil then
					begin = 1
				end
				if #self.fileList.items ~= self.fileList.noItems then
					if  begin + self.scrollAmnt <= self.fileList.noItems then
						begin = begin + self.scrollAmnt
					end
				end


				self.fileList.begin = begin
			end

			if event[1] == "mouse_click" and event[2] == 1 then
				local x1 = event[3]
				local y1 = event[4]
				if x1 >= x and x1< x + self.width and y1 == y  then
					scrollUp()
				end
				if x1 >= x and x1< x + self.width and y1 == y+2  then
					scrollDown()
				end
			end
			if event[1] == "mouse_scroll" then
				if event[2] == -1 then
					scrollUp()
				elseif event[2] == 1 then
					scrollDown()
				end
			end

		end
	
	}
end

function newRect(sName,xPos,yPos,vWidth,vHeight,sColor)
	
	return{
		name = sName,
		x = xPos,
		y = yPos,
		width = vWidth,
		height = vHeight,
		color = sColor,
		enabled = true,
		render = function(self,renderer)
			renderer:fillRect(self.x,self.y,self.width,self.height,self.color)
		end,
		update = function(self,event)
			
		end
	
	}	
end

function newPopupList(sName,xPos,yPos,sList,sAction)
	
	local sBtns = {}
	local longestItem = 0
	for i =1,#sList do
		if #sList[i] > longestItem then
			longestItem = #sList[i]
		end
	end
	for i =1,#sList do
		sBtns[#sBtns+1] = newButton(sList[i],sAction,xPos,yPos+i-1,longestItem+2,1,colors.white)
	end
	
	return{
		name = sName,
		x = xPos,
		y = yPos,
		btns = sBtns,
		width = longestItem+2,
		enabled = true,
		skip = true,
		hover = true,
		render = function (self,renderer)
			if self.hover then
				renderer:fillRect(self.x-1,self.y+1,self.width-1,#self.btns-1,colors.black)
			end
			for i=1,#self.btns do
				self.btns[i]:render(renderer)
			end
		end,
		update = function(self,event)
			if not self.skip then
				local clearEvent = false
				if event[1] == "mouse_click" and event[2] == 1 then
					local x = event[3]
					local y = event[4]
					if x >= self.x and x< self.x + self.width and y >= self.y and y< self.y +#self.btns then
						clearEvent = true
					else
						self.enabled = false
					end
				end
				for i=1,#self.btns do
					self.btns[i]:update(event)
				end
				self.enabled = false
				self.skip = true
				if clearEvent then
					event[1] = "cleared"
				end
			else
				self.skip = false
			end
		end
	
	}
end

function newTabList(sName,xPos,yPos,vWidth,vHeight,vTabs)
	
	return{
	
		name = sName,
		x = xPos,
		y = yPos,
		width = vWidth,
		height = vHeight,
		tabBtns = {},
		enabled = true,
		tabs = vTabs,
		render = function(self,renderer)
			
			for i=1,#self.tabBtns do
				if self.tabBtns[i].enabled then
					self.tabBtns[i]:render(renderer)
				end
			end
		end,
		update = function(self,event)
			self.tabBtns = {}
			local tabs = self.tabs
			local btnWidth = 4 + 1
			local xPs = 1
			for i = 1,#tabs do
				--print(tabs[i].name)sleep(2)
				self.tabBtns[#self.tabBtns+1] = newButton(tabs[i].name,function(self) josMulti.changeCurrentTabI(self.id) end,self.x+xPs,self.y,btnWidth,self.height,colors.lightBlue)
				self.tabBtns[#self.tabBtns].id = i
				xPs = xPs+btnWidth+1
			end
			for i = 1,#self.tabBtns do
				if self.tabBtns[i].enabled then
					self.tabBtns[i]:update(event)
				end
			end
		end
		
	}	
end